#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"blazor"},{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!pwsh

# 0. Clean-up the bin and obj folders
Get-ChildItem .. -Include bin,obj -Recurse | Remove-Item -Force -Recurse

# 2. Pack up the NuGet package. Note, you should increment the version because the previous one, once installed, will be in your NuGet cache
$version = [System.DateTime]::Now.ToString("yyyy.MM.dd.HHmmss")
dotnet pack /p:PackageVersion=$version ../src/BlazorInteractive/BlazorInteractive.csproj

# 3. Check that the package is there
Get-ChildItem .. -Recurse *.nupkg

#!csharp

#i nuget:/workspaces/BlazorInteractive/src/BlazorInteractive/bin/Release
#r "nuget:BlazorInteractive"

#!blazor

<h1>Hello @name</h1>

@code {
    string name = "Alice";
}

#!csharp

#!blazor --name Counter
<h1>Counter</h1>

<p>
    Current count: @currentCount
</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
  public int currentCount = 0;

  void IncrementCount()
  {
    currentCount++;
  }
}

#!csharp

var componentName = typeof(Counter).Name;
componentName
